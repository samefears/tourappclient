// ==|== colors ================================================================
// =============================================================================

// Maps
// -----------------------------------------------------------------------------

// MAIN COLOURS TO USE - 
// white, 
// offwhite, 
// cyan, 
// darkcyan
// orange
// gray
// black?

$default-color-palette-data: (
  white: #fff,
  offwhite: #F5F2DD,
  cyan: #159493,
  darkcyan: #08585D,
  orange: #FC5835,
  gray: #454445,
  black: #161819,
  charcoal: #50514f,
  blue: #247ba0,
  green: #70c1b3,
  yellow: #ffe066,
  red: #d2252f,
  ink: hsl(0, 0%, 10%),
  primary: #2aaed3,
  danger: red,
  background: white,
  header: charcoal,
  nav-link: white
  

);

$custom-color-palette-data: () !default;

// Functions
// -----------------------------------------------------------------------------
// Returns the color value for a given color name and group.
// @param {String} $hue - The color's hue.
// @param {String} $value - The darkness/lightness of the color. Defaults to base.
// @param {Color} $for-background - The background color on which this color will
// appear. Applies a multiply filter to ensure appropriate contrast.
// @return {Color} The color value.
@function color($hue, $for-background: null) {
  // merge custom color palette
  $color-palette-data: map-merge($default-color-palette-data, $custom-color-palette-data);

  // fetch color from map
  $fetched-color: map-get($color-palette-data, $hue);

  // if fetched value matches another key
  @if map-has-key($color-palette-data, $fetched-color) {
    // get color with fetched key
    $fetched-color: map-get($color-palette-data, $fetched-color);
  }

  @if $for-background != null {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    @error "Color `#{$hue}` not found. Available colors: #{available-names($color-palette-data)}";
  }
}

// Darkens the foreground color by the background color.
// This is the same as the “multiply” filter in graphics apps.
// @param {Color} $foreground - The color to darken.
// @param {Color} $background - The background to base darkening on.
// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #fff;
  }

  @return $foreground * $background / 255;
}

// Determine strength of inset shadow based on background color
// @param {Color} $color - The color to match shadow opacity against
// @return {Number} The decimal value of opacity
@function inset-shadow($color) {
  @if (lightness($color) > 80 or opacity($color) < 0.5) {
    @return 0.1;
  } @else {
    @return 0.2;
  }
}
