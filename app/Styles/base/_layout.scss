// Mixins
// -----------------------------------------------------------------------------
@mixin container($width: none) {
  @if $width == "" or $width == none or $width == "none" or $width == "reset" {
    margin-left: 0;
    margin-right: 0;
    max-width: none;
  } @else if $width == "reset-margin" or $width == "reset-margins" {
    margin-left: 0;
    margin-right: 0;
    max-width: 100%;
  } @else {
    margin-left: auto;
    margin-right: auto;
    max-width: $width;
    // max-width: numToRem($width);
  }
}

@mixin flex-center($full-height: false) {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  text-align: center;

  @if $full-height {
    height: 100vh;
  }
}

// To be used on flex items. Resolves some common layout issues, such as
// text truncation not respecting padding or breaking out of container.
// https://css-tricks.com/flexbox-truncated-text/
@mixin layout-flex-fix {
  min-width: 0;
  max-width: 100%;
}


//clearfix
@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}



// ==|== layout ================================================================
// =============================================================================

.container{
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  @include breakpointMax(991px){
    padding: 0 1.5rem;
  }
}

section{
    @include clearfix;
}



// ==|== buttons ================================================================
// =============================================================================

// .button{
//   color: color(white);
//   border: 2px solid color(white);
//   background: none;
//   font-weight: bold;
//   text-align: center;
//   padding: 1rem 3.5rem;
//   display: inline-block;
//   transition: all 0.3s ease;
//   &:hover{
//     color: color(black);
//     background: color(white);
//   }
// }


.hide{
  visibility: hidden;
  opacity: 0;
}

.show{
  visibility: visible;
  opacity: 1;
}
